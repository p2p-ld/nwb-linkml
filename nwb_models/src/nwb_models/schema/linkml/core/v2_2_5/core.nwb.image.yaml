name: core.nwb.image
annotations:
  is_namespace:
    tag: is_namespace
    value: false
  namespace:
    tag: namespace
    value: core
id: core.nwb.image
version: 2.2.5
imports:
- core.nwb.base
- core.nwb.language
default_prefix: core.nwb.image/
classes:
  GrayscaleImage:
    name: GrayscaleImage
    description: A grayscale image.
    is_a: Image
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      value:
        name: value
        array:
          dimensions:
          - alias: x
          - alias: y
        range: numeric
    tree_root: true
  RGBImage:
    name: RGBImage
    description: A color image.
    is_a: Image
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      value:
        name: value
        array:
          dimensions:
          - alias: x
          - alias: y
          - alias: r_g_b
            exact_cardinality: 3
        range: numeric
    tree_root: true
  RGBAImage:
    name: RGBAImage
    description: A color image with transparency.
    is_a: Image
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      value:
        name: value
        array:
          dimensions:
          - alias: x
          - alias: y
          - alias: r_g_b_a
            exact_cardinality: 4
        range: numeric
    tree_root: true
  ImageSeries:
    name: ImageSeries
    description: General image data that is common between acquisition and stimulus
      time series. Sometimes the image data is stored in the file in a raw format
      while other times it will be stored as a series of external image files in the
      host file system. The data field will either be binary data, if the data is
      stored in the NWB file, or empty, if the data is stored in an external image
      stack. [frame][x][y] or [frame][x][y][z].
    is_a: TimeSeries
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      data:
        name: data
        description: Binary data representing images across frames.
        range: ImageSeries__data
        inlined: true
      dimension:
        name: dimension
        description: Number of pixels on x, y, (and z) axes.
        array:
          dimensions:
          - alias: rank
        range: int32
        required: false
        multivalued: false
      external_file:
        name: external_file
        description: Paths to one or more external file(s). The field is only present
          if format='external'. This is only relevant if the image series is stored
          in the file system as one or more image file(s). This field should NOT be
          used if the image is stored in another NWB file and that file is linked
          to this file.
        range: ImageSeries__external_file
        inlined: true
      format:
        name: format
        description: Format of image. If this is 'external', then the attribute 'external_file'
          contains the path information to the image files. If this is 'raw', then
          the raw (single-channel) binary data is stored in the 'data' dataset. If
          this attribute is not present, then the default format='raw' case is assumed.
        ifabsent: string(raw)
        range: text
    tree_root: true
  ImageSeries__data:
    name: ImageSeries__data
    description: Binary data representing images across frames.
    attributes:
      name:
        name: name
        ifabsent: string(data)
        identifier: true
        range: string
        required: true
        equals_string: data
      conversion:
        name: conversion
        description: Scalar to multiply each element in data to convert it to the
          specified 'unit'. If the data are stored in acquisition system units or
          other units that require a conversion to be interpretable, multiply the
          data by 'conversion' to convert the data to the specified 'unit'. e.g. if
          the data acquisition system stores values in this object as signed 16-bit
          integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V
          to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion'
          multiplier to get from raw data acquisition values to recorded volts is
          2.5/32768/8000 = 9.5367e-9.
        ifabsent: float(1.0)
        range: float32
        required: false
      resolution:
        name: resolution
        description: Smallest meaningful difference between values in data, stored
          in the specified by unit, e.g., the change in value of the least significant
          bit, or a larger number if signal noise is known to be present. If unknown,
          use -1.0.
        ifabsent: float(-1.0)
        range: float32
        required: false
      unit:
        name: unit
        description: Base unit of measurement for working with the data. Actual stored
          values are not necessarily stored in these units. To access the data in
          these units, multiply 'data' by 'conversion'.
        range: text
        required: true
      value:
        name: value
        range: numeric
        any_of:
        - array:
            dimensions:
            - alias: frame
            - alias: x
            - alias: y
        - array:
            dimensions:
            - alias: frame
            - alias: x
            - alias: y
            - alias: z
  ImageSeries__external_file:
    name: ImageSeries__external_file
    description: Paths to one or more external file(s). The field is only present
      if format='external'. This is only relevant if the image series is stored in
      the file system as one or more image file(s). This field should NOT be used
      if the image is stored in another NWB file and that file is linked to this file.
    attributes:
      name:
        name: name
        ifabsent: string(external_file)
        identifier: true
        range: string
        required: true
        equals_string: external_file
      starting_frame:
        name: starting_frame
        description: Each external image may contain one or more consecutive frames
          of the full ImageSeries. This attribute serves as an index to indicate which
          frames each file contains, to faciliate random access. The 'starting_frame'
          attribute, hence, contains a list of frame numbers within the full ImageSeries
          of the first frame of each file listed in the parent 'external_file' dataset.
          Zero-based indexing is used (hence, the first element will always be zero).
          For example, if the 'external_file' dataset has three paths to files and
          the first file has 5 frames, the second file has 10 frames, and the third
          file has 20 frames, then this attribute will have values [0, 5, 15]. If
          there is a single external file that holds all of the frames of the ImageSeries
          (and so there is a single element in the 'external_file' dataset), then
          this attribute should have value [0].
        range: int32
        required: true
        multivalued: true
      value:
        name: value
        array:
          dimensions:
          - alias: num_files
        range: text
  ImageMaskSeries:
    name: ImageMaskSeries
    description: An alpha mask that is applied to a presented visual stimulus. The
      'data' array contains an array of mask values that are applied to the displayed
      image. Mask values are stored as RGBA. Mask can vary with time. The timestamps
      array indicates the starting time of a mask, and that mask pattern continues
      until it's explicitly changed.
    is_a: ImageSeries
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      masked_imageseries:
        name: masked_imageseries
        annotations:
          source_type:
            tag: source_type
            value: link
        required: true
        inlined: true
        any_of:
        - range: ImageSeries
        - range: string
    tree_root: true
  OpticalSeries:
    name: OpticalSeries
    description: Image data that is presented or recorded. A stimulus template movie
      will be stored only as an image. When the image is presented as stimulus, additional
      data is required, such as field of view (e.g., how much of the visual field
      the image covers, or how what is the area of the target being imaged). If the
      OpticalSeries represents acquired imaging data, orientation is also important.
    is_a: ImageSeries
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      data:
        name: data
        description: Images presented to subject, either grayscale or RGB
        range: OpticalSeries__data
        required: true
        inlined: true
      distance:
        name: distance
        description: Distance from camera/monitor to target/eye.
        range: float32
      field_of_view:
        name: field_of_view
        description: Width, height and depth of image, or imaged area, in meters.
        range: float32
        required: false
        multivalued: false
        any_of:
        - array:
            dimensions:
            - alias: width_height
              exact_cardinality: 2
        - array:
            dimensions:
            - alias: width_height_depth
              exact_cardinality: 3
      orientation:
        name: orientation
        description: Description of image relative to some reference frame (e.g.,
          which way is up). Must also specify frame of reference.
        range: text
    tree_root: true
  OpticalSeries__data:
    name: OpticalSeries__data
    description: Images presented to subject, either grayscale or RGB
    attributes:
      name:
        name: name
        ifabsent: string(data)
        identifier: true
        range: string
        required: true
        equals_string: data
      conversion:
        name: conversion
        description: Scalar to multiply each element in data to convert it to the
          specified 'unit'. If the data are stored in acquisition system units or
          other units that require a conversion to be interpretable, multiply the
          data by 'conversion' to convert the data to the specified 'unit'. e.g. if
          the data acquisition system stores values in this object as signed 16-bit
          integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V
          to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion'
          multiplier to get from raw data acquisition values to recorded volts is
          2.5/32768/8000 = 9.5367e-9.
        ifabsent: float(1.0)
        range: float32
        required: false
      resolution:
        name: resolution
        description: Smallest meaningful difference between values in data, stored
          in the specified by unit, e.g., the change in value of the least significant
          bit, or a larger number if signal noise is known to be present. If unknown,
          use -1.0.
        ifabsent: float(-1.0)
        range: float32
        required: false
      unit:
        name: unit
        description: Base unit of measurement for working with the data. Actual stored
          values are not necessarily stored in these units. To access the data in
          these units, multiply 'data' by 'conversion'.
        range: text
        required: true
      value:
        name: value
        range: numeric
        any_of:
        - array:
            dimensions:
            - alias: frame
            - alias: x
            - alias: y
        - array:
            dimensions:
            - alias: frame
            - alias: x
            - alias: y
            - alias: r_g_b
              exact_cardinality: 3
  IndexSeries:
    name: IndexSeries
    description: Stores indices to image frames stored in an ImageSeries. The purpose
      of the ImageIndexSeries is to allow a static image stack to be stored somewhere,
      and the images in the stack to be referenced out-of-order. This can be for the
      display of individual images, or of movie segments (as a movie is simply a series
      of images). The data field stores the index of the frame in the referenced ImageSeries,
      and the timestamps array indicates when that image was displayed.
    is_a: TimeSeries
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      data:
        name: data
        description: Index of the frame in the referenced ImageSeries.
        range: IndexSeries__data
        required: true
        inlined: true
      indexed_timeseries:
        name: indexed_timeseries
        annotations:
          source_type:
            tag: source_type
            value: link
        required: true
        inlined: true
        any_of:
        - range: ImageSeries
        - range: string
    tree_root: true
  IndexSeries__data:
    name: IndexSeries__data
    description: Index of the frame in the referenced ImageSeries.
    attributes:
      name:
        name: name
        ifabsent: string(data)
        identifier: true
        range: string
        required: true
        equals_string: data
      conversion:
        name: conversion
        description: Scalar to multiply each element in data to convert it to the
          specified 'unit'. If the data are stored in acquisition system units or
          other units that require a conversion to be interpretable, multiply the
          data by 'conversion' to convert the data to the specified 'unit'. e.g. if
          the data acquisition system stores values in this object as signed 16-bit
          integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V
          to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion'
          multiplier to get from raw data acquisition values to recorded volts is
          2.5/32768/8000 = 9.5367e-9.
        ifabsent: float(1.0)
        range: float32
        required: false
      resolution:
        name: resolution
        description: Smallest meaningful difference between values in data, stored
          in the specified by unit, e.g., the change in value of the least significant
          bit, or a larger number if signal noise is known to be present. If unknown,
          use -1.0.
        ifabsent: float(-1.0)
        range: float32
        required: false
      unit:
        name: unit
        description: Base unit of measurement for working with the data. Actual stored
          values are not necessarily stored in these units. To access the data in
          these units, multiply 'data' by 'conversion'.
        range: text
        required: true
      value:
        name: value
        array:
          dimensions:
          - alias: num_times
        range: int32
