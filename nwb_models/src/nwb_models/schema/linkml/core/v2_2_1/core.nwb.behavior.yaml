name: core.nwb.behavior
annotations:
  is_namespace:
    tag: is_namespace
    value: false
  namespace:
    tag: namespace
    value: core
id: core.nwb.behavior
version: 2.2.1
imports:
- core.nwb.base
- core.nwb.misc
- core.nwb.language
default_prefix: core.nwb.behavior/
classes:
  SpatialSeries:
    name: SpatialSeries
    description: 'Direction, e.g., of gaze or travel, or position. The TimeSeries::data
      field is a 2D array storing position or direction relative to some reference
      frame. Array structure: [num measurements] [num dimensions]. Each SpatialSeries
      has a text dataset reference_frame that indicates the zero-position, or the
      zero-axes for direction. For example, if representing gaze direction, ''straight-ahead''
      might be a specific pixel on the monitor, or some other point in space. For
      position data, the 0,0 point might be the top-left corner of an enclosure, as
      viewed from the tracking camera. The unit of data will indicate how to interpret
      SpatialSeries values.'
    is_a: TimeSeries
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      data:
        name: data
        description: 1-D or 2-D array storing position or direction relative to some
          reference frame.
        range: SpatialSeries__data
        required: true
        inlined: true
      reference_frame:
        name: reference_frame
        description: Description defining what exactly 'straight-ahead' means.
        range: text
    tree_root: true
  SpatialSeries__data:
    name: SpatialSeries__data
    description: 1-D or 2-D array storing position or direction relative to some reference
      frame.
    attributes:
      name:
        name: name
        ifabsent: string(data)
        identifier: true
        range: string
        required: true
        equals_string: data
      conversion:
        name: conversion
        description: Scalar to multiply each element in data to convert it to the
          specified 'unit'. If the data are stored in acquisition system units or
          other units that require a conversion to be interpretable, multiply the
          data by 'conversion' to convert the data to the specified 'unit'. e.g. if
          the data acquisition system stores values in this object as signed 16-bit
          integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V
          to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion'
          multiplier to get from raw data acquisition values to recorded volts is
          2.5/32768/8000 = 9.5367e-9.
        ifabsent: float(1.0)
        range: float32
        required: false
      resolution:
        name: resolution
        description: Smallest meaningful difference between values in data, stored
          in the specified by unit, e.g., the change in value of the least significant
          bit, or a larger number if signal noise is known to be present. If unknown,
          use -1.0.
        ifabsent: float(-1.0)
        range: float32
        required: false
      unit:
        name: unit
        description: Base unit of measurement for working with the data. The default
          value is 'meters'. Actual stored values are not necessarily stored in these
          units. To access the data in these units, multiply 'data' by 'conversion'.
        ifabsent: string(meters)
        range: text
        required: false
      value:
        name: value
        range: numeric
        any_of:
        - array:
            dimensions:
            - alias: num_times
        - array:
            dimensions:
            - alias: num_times
            - alias: num_features
  BehavioralEpochs:
    name: BehavioralEpochs
    description: TimeSeries for storing behavioral epochs.  The objective of this
      and the other two Behavioral interfaces (e.g. BehavioralEvents and BehavioralTimeSeries)
      is to provide generic hooks for software tools/scripts. This allows a tool/script
      to take the output one specific interface (e.g., UnitTimes) and plot that data
      relative to another data modality (e.g., behavioral events) without having to
      define all possible modalities in advance. Declaring one of these interfaces
      means that one or more TimeSeries of the specified type is published. These
      TimeSeries should reside in a group having the same name as the interface. For
      example, if a BehavioralTimeSeries interface is declared, the module will have
      one or more TimeSeries defined in the module sub-group 'BehavioralTimeSeries'.
      BehavioralEpochs should use IntervalSeries. BehavioralEvents is used for irregular
      events. BehavioralTimeSeries is for continuous data.
    is_a: NWBDataInterface
    attributes:
      name:
        name: name
        ifabsent: string(BehavioralEpochs)
        identifier: true
        range: string
        required: true
      value:
        name: value
        multivalued: true
        inlined: true
        inlined_as_list: false
        any_of:
        - range: IntervalSeries
    tree_root: true
  BehavioralEvents:
    name: BehavioralEvents
    description: TimeSeries for storing behavioral events. See description of <a href="#BehavioralEpochs">BehavioralEpochs</a>
      for more details.
    is_a: NWBDataInterface
    attributes:
      name:
        name: name
        ifabsent: string(BehavioralEvents)
        identifier: true
        range: string
        required: true
      value:
        name: value
        multivalued: true
        inlined: true
        inlined_as_list: false
        any_of:
        - range: TimeSeries
    tree_root: true
  BehavioralTimeSeries:
    name: BehavioralTimeSeries
    description: TimeSeries for storing Behavoioral time series data. See description
      of <a href="#BehavioralEpochs">BehavioralEpochs</a> for more details.
    is_a: NWBDataInterface
    attributes:
      name:
        name: name
        ifabsent: string(BehavioralTimeSeries)
        identifier: true
        range: string
        required: true
      value:
        name: value
        multivalued: true
        inlined: true
        inlined_as_list: false
        any_of:
        - range: TimeSeries
    tree_root: true
  PupilTracking:
    name: PupilTracking
    description: Eye-tracking data, representing pupil size.
    is_a: NWBDataInterface
    attributes:
      name:
        name: name
        ifabsent: string(PupilTracking)
        identifier: true
        range: string
        required: true
      value:
        name: value
        multivalued: true
        inlined: true
        inlined_as_list: false
        any_of:
        - range: TimeSeries
    tree_root: true
  EyeTracking:
    name: EyeTracking
    description: Eye-tracking data, representing direction of gaze.
    is_a: NWBDataInterface
    attributes:
      name:
        name: name
        ifabsent: string(EyeTracking)
        identifier: true
        range: string
        required: true
      value:
        name: value
        multivalued: true
        inlined: true
        inlined_as_list: false
        any_of:
        - range: SpatialSeries
    tree_root: true
  CompassDirection:
    name: CompassDirection
    description: With a CompassDirection interface, a module publishes a SpatialSeries
      object representing a floating point value for theta. The SpatialSeries::reference_frame
      field should indicate what direction corresponds to 0 and which is the direction
      of rotation (this should be clockwise). The si_unit for the SpatialSeries should
      be radians or degrees.
    is_a: NWBDataInterface
    attributes:
      name:
        name: name
        ifabsent: string(CompassDirection)
        identifier: true
        range: string
        required: true
      value:
        name: value
        multivalued: true
        inlined: true
        inlined_as_list: false
        any_of:
        - range: SpatialSeries
    tree_root: true
  Position:
    name: Position
    description: Position data, whether along the x, x/y or x/y/z axis.
    is_a: NWBDataInterface
    attributes:
      name:
        name: name
        ifabsent: string(Position)
        identifier: true
        range: string
        required: true
      value:
        name: value
        multivalued: true
        inlined: true
        inlined_as_list: false
        any_of:
        - range: SpatialSeries
    tree_root: true
