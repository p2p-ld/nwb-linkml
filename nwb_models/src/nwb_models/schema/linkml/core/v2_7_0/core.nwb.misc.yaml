name: core.nwb.misc
annotations:
  is_namespace:
    tag: is_namespace
    value: false
  namespace:
    tag: namespace
    value: core
id: core.nwb.misc
version: 2.7.0
imports:
- core.nwb.base
- ../../hdmf_common/v1_8_0/namespace
- core.nwb.ecephys
- core.nwb.language
default_prefix: core.nwb.misc/
classes:
  AbstractFeatureSeries:
    name: AbstractFeatureSeries
    description: Abstract features, such as quantitative descriptions of sensory stimuli.
      The TimeSeries::data field is a 2D array, storing those features (e.g., for
      visual grating stimulus this might be orientation, spatial frequency and contrast).
      Null stimuli (eg, uniform gray) can be marked as being an independent feature
      (eg, 1.0 for gray, 0.0 for actual stimulus) or by storing NaNs for feature values,
      or through use of the TimeSeries::control fields. A set of features is considered
      to persist until the next set of features is defined. The final set of features
      stored should be the null set. This is useful when storing the raw stimulus
      is impractical.
    is_a: TimeSeries
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      data:
        name: data
        description: Values of each feature at each time.
        range: AbstractFeatureSeries__data
        required: true
        inlined: true
      feature_units:
        name: feature_units
        description: Units of each feature.
        array:
          dimensions:
          - alias: num_features
        range: text
        required: false
        multivalued: false
      features:
        name: features
        description: Description of the features represented in TimeSeries::data.
        array:
          dimensions:
          - alias: num_features
        range: text
        required: true
        multivalued: false
    tree_root: true
  AbstractFeatureSeries__data:
    name: AbstractFeatureSeries__data
    description: Values of each feature at each time.
    attributes:
      name:
        name: name
        ifabsent: string(data)
        identifier: true
        range: string
        required: true
        equals_string: data
      continuity:
        name: continuity
        description: Optionally describe the continuity of the data. Can be "continuous",
          "instantaneous", or "step". For example, a voltage trace would be "continuous",
          because samples are recorded from a continuous process. An array of lick
          times would be "instantaneous", because the data represents distinct moments
          in time. Times of image presentations would be "step" because the picture
          remains the same until the next timepoint. This field is optional, but is
          useful in providing information about the underlying data. It may inform
          the way this data is interpreted, the way it is visualized, and what analysis
          methods are applicable.
        range: text
        required: false
      conversion:
        name: conversion
        description: Scalar to multiply each element in data to convert it to the
          specified 'unit'. If the data are stored in acquisition system units or
          other units that require a conversion to be interpretable, multiply the
          data by 'conversion' to convert the data to the specified 'unit'. e.g. if
          the data acquisition system stores values in this object as signed 16-bit
          integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V
          to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion'
          multiplier to get from raw data acquisition values to recorded volts is
          2.5/32768/8000 = 9.5367e-9.
        ifabsent: float(1.0)
        range: float32
        required: false
      offset:
        name: offset
        description: Scalar to add to the data after scaling by 'conversion' to finalize
          its coercion to the specified 'unit'. Two common examples of this include
          (a) data stored in an unsigned type that requires a shift after scaling
          to re-center the data, and (b) specialized recording devices that naturally
          cause a scalar offset with respect to the true units.
        range: float32
        required: false
      resolution:
        name: resolution
        description: Smallest meaningful difference between values in data, stored
          in the specified by unit, e.g., the change in value of the least significant
          bit, or a larger number if signal noise is known to be present. If unknown,
          use -1.0.
        ifabsent: float(-1.0)
        range: float32
        required: false
      unit:
        name: unit
        description: Since there can be different units for different features, store
          the units in 'feature_units'. The default value for this attribute is "see
          'feature_units'".
        ifabsent: string(see 'feature_units')
        range: text
        required: false
      value:
        name: value
        range: numeric
        any_of:
        - array:
            dimensions:
            - alias: num_times
        - array:
            dimensions:
            - alias: num_times
            - alias: num_features
  AnnotationSeries:
    name: AnnotationSeries
    description: Stores user annotations made during an experiment. The data[] field
      stores a text array, and timestamps are stored for each annotation (ie, interval=1).
      This is largely an alias to a standard TimeSeries storing a text array but that
      is identifiable as storing annotations in a machine-readable way.
    is_a: TimeSeries
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      data:
        name: data
        description: Annotations made during an experiment.
        range: AnnotationSeries__data
        required: true
        inlined: true
    tree_root: true
  AnnotationSeries__data:
    name: AnnotationSeries__data
    description: Annotations made during an experiment.
    attributes:
      name:
        name: name
        ifabsent: string(data)
        identifier: true
        range: string
        required: true
        equals_string: data
      continuity:
        name: continuity
        description: Optionally describe the continuity of the data. Can be "continuous",
          "instantaneous", or "step". For example, a voltage trace would be "continuous",
          because samples are recorded from a continuous process. An array of lick
          times would be "instantaneous", because the data represents distinct moments
          in time. Times of image presentations would be "step" because the picture
          remains the same until the next timepoint. This field is optional, but is
          useful in providing information about the underlying data. It may inform
          the way this data is interpreted, the way it is visualized, and what analysis
          methods are applicable.
        range: text
        required: false
      conversion:
        name: conversion
        description: Scalar to multiply each element in data to convert it to the
          specified 'unit'. If the data are stored in acquisition system units or
          other units that require a conversion to be interpretable, multiply the
          data by 'conversion' to convert the data to the specified 'unit'. e.g. if
          the data acquisition system stores values in this object as signed 16-bit
          integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V
          to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion'
          multiplier to get from raw data acquisition values to recorded volts is
          2.5/32768/8000 = 9.5367e-9.
        ifabsent: float(1.0)
        range: float32
        required: false
      offset:
        name: offset
        description: Scalar to add to the data after scaling by 'conversion' to finalize
          its coercion to the specified 'unit'. Two common examples of this include
          (a) data stored in an unsigned type that requires a shift after scaling
          to re-center the data, and (b) specialized recording devices that naturally
          cause a scalar offset with respect to the true units.
        range: float32
        required: false
      resolution:
        name: resolution
        description: Smallest meaningful difference between values in data. Annotations
          have no units, so the value is fixed to -1.0.
        ifabsent: float(-1.0)
        range: float32
        required: true
        equals_number: -1
      unit:
        name: unit
        description: Base unit of measurement for working with the data. Annotations
          have no units, so the value is fixed to 'n/a'.
        ifabsent: string(n/a)
        range: text
        required: true
        equals_string: n/a
      value:
        name: value
        array:
          dimensions:
          - alias: num_times
        range: text
  IntervalSeries:
    name: IntervalSeries
    description: Stores intervals of data. The timestamps field stores the beginning
      and end of intervals. The data field stores whether the interval just started
      (>0 value) or ended (<0 value). Different interval types can be represented
      in the same series by using multiple key values (eg, 1 for feature A, 2 for
      feature B, 3 for feature C, etc). The field data stores an 8-bit integer. This
      is largely an alias of a standard TimeSeries but that is identifiable as representing
      time intervals in a machine-readable way.
    is_a: TimeSeries
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      data:
        name: data
        description: Use values >0 if interval started, <0 if interval ended.
        range: IntervalSeries__data
        required: true
        inlined: true
    tree_root: true
  IntervalSeries__data:
    name: IntervalSeries__data
    description: Use values >0 if interval started, <0 if interval ended.
    attributes:
      name:
        name: name
        ifabsent: string(data)
        identifier: true
        range: string
        required: true
        equals_string: data
      continuity:
        name: continuity
        description: Optionally describe the continuity of the data. Can be "continuous",
          "instantaneous", or "step". For example, a voltage trace would be "continuous",
          because samples are recorded from a continuous process. An array of lick
          times would be "instantaneous", because the data represents distinct moments
          in time. Times of image presentations would be "step" because the picture
          remains the same until the next timepoint. This field is optional, but is
          useful in providing information about the underlying data. It may inform
          the way this data is interpreted, the way it is visualized, and what analysis
          methods are applicable.
        range: text
        required: false
      conversion:
        name: conversion
        description: Scalar to multiply each element in data to convert it to the
          specified 'unit'. If the data are stored in acquisition system units or
          other units that require a conversion to be interpretable, multiply the
          data by 'conversion' to convert the data to the specified 'unit'. e.g. if
          the data acquisition system stores values in this object as signed 16-bit
          integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V
          to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion'
          multiplier to get from raw data acquisition values to recorded volts is
          2.5/32768/8000 = 9.5367e-9.
        ifabsent: float(1.0)
        range: float32
        required: false
      offset:
        name: offset
        description: Scalar to add to the data after scaling by 'conversion' to finalize
          its coercion to the specified 'unit'. Two common examples of this include
          (a) data stored in an unsigned type that requires a shift after scaling
          to re-center the data, and (b) specialized recording devices that naturally
          cause a scalar offset with respect to the true units.
        range: float32
        required: false
      resolution:
        name: resolution
        description: Smallest meaningful difference between values in data. Annotations
          have no units, so the value is fixed to -1.0.
        ifabsent: float(-1.0)
        range: float32
        required: true
        equals_number: -1
      unit:
        name: unit
        description: Base unit of measurement for working with the data. Annotations
          have no units, so the value is fixed to 'n/a'.
        ifabsent: string(n/a)
        range: text
        required: true
        equals_string: n/a
      value:
        name: value
        array:
          dimensions:
          - alias: num_times
        range: int8
  DecompositionSeries:
    name: DecompositionSeries
    description: Spectral analysis of a time series, e.g. of an LFP or a speech signal.
    is_a: TimeSeries
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      data:
        name: data
        description: Data decomposed into frequency bands.
        range: DecompositionSeries__data
        required: true
        inlined: true
      metric:
        name: metric
        description: The metric used, e.g. phase, amplitude, power.
        range: text
        required: true
      source_channels:
        name: source_channels
        annotations:
          named:
            tag: named
            value: true
          source_type:
            tag: source_type
            value: neurodata_type_inc
        description: DynamicTableRegion pointer to the channels that this decomposition
          series was generated from.
        range: DynamicTableRegion
        inlined: true
      bands:
        name: bands
        description: Table for describing the bands that this series was generated
          from. There should be one row in this table for each band.
        range: DecompositionSeries__bands
        required: true
        inlined: true
        inlined_as_list: true
      source_timeseries:
        name: source_timeseries
        annotations:
          source_type:
            tag: source_type
            value: link
        inlined: true
        any_of:
        - range: TimeSeries
        - range: string
    tree_root: true
  DecompositionSeries__data:
    name: DecompositionSeries__data
    description: Data decomposed into frequency bands.
    attributes:
      name:
        name: name
        ifabsent: string(data)
        identifier: true
        range: string
        required: true
        equals_string: data
      continuity:
        name: continuity
        description: Optionally describe the continuity of the data. Can be "continuous",
          "instantaneous", or "step". For example, a voltage trace would be "continuous",
          because samples are recorded from a continuous process. An array of lick
          times would be "instantaneous", because the data represents distinct moments
          in time. Times of image presentations would be "step" because the picture
          remains the same until the next timepoint. This field is optional, but is
          useful in providing information about the underlying data. It may inform
          the way this data is interpreted, the way it is visualized, and what analysis
          methods are applicable.
        range: text
        required: false
      conversion:
        name: conversion
        description: Scalar to multiply each element in data to convert it to the
          specified 'unit'. If the data are stored in acquisition system units or
          other units that require a conversion to be interpretable, multiply the
          data by 'conversion' to convert the data to the specified 'unit'. e.g. if
          the data acquisition system stores values in this object as signed 16-bit
          integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V
          to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion'
          multiplier to get from raw data acquisition values to recorded volts is
          2.5/32768/8000 = 9.5367e-9.
        ifabsent: float(1.0)
        range: float32
        required: false
      offset:
        name: offset
        description: Scalar to add to the data after scaling by 'conversion' to finalize
          its coercion to the specified 'unit'. Two common examples of this include
          (a) data stored in an unsigned type that requires a shift after scaling
          to re-center the data, and (b) specialized recording devices that naturally
          cause a scalar offset with respect to the true units.
        range: float32
        required: false
      resolution:
        name: resolution
        description: Smallest meaningful difference between values in data, stored
          in the specified by unit, e.g., the change in value of the least significant
          bit, or a larger number if signal noise is known to be present. If unknown,
          use -1.0.
        ifabsent: float(-1.0)
        range: float32
        required: false
      unit:
        name: unit
        description: Base unit of measurement for working with the data. Actual stored
          values are not necessarily stored in these units. To access the data in
          these units, multiply 'data' by 'conversion'.
        ifabsent: string(no unit)
        range: text
        required: true
      value:
        name: value
        array:
          dimensions:
          - alias: num_times
          - alias: num_channels
          - alias: num_bands
        range: numeric
  DecompositionSeries__bands:
    name: DecompositionSeries__bands
    description: Table for describing the bands that this series was generated from.
      There should be one row in this table for each band.
    is_a: DynamicTable
    attributes:
      name:
        name: name
        ifabsent: string(bands)
        identifier: true
        range: string
        required: true
        equals_string: bands
      band_name:
        name: band_name
        description: Name of the band, e.g. theta.
        array:
          minimum_number_dimensions: 1
          maximum_number_dimensions: false
        range: text
        required: true
        multivalued: false
      band_limits:
        name: band_limits
        description: Low and high limit of each band in Hz. If it is a Gaussian filter,
          use 2 SD on either side of the center.
        array:
          dimensions:
          - alias: num_bands
          - alias: low_high
            exact_cardinality: 2
        range: float32
        required: true
        multivalued: false
      band_mean:
        name: band_mean
        description: The mean Gaussian filters, in Hz.
        array:
          dimensions:
          - alias: num_bands
        range: float32
        required: true
        multivalued: false
      band_stdev:
        name: band_stdev
        description: The standard deviation of Gaussian filters, in Hz.
        array:
          dimensions:
          - alias: num_bands
        range: float32
        required: true
        multivalued: false
  Units:
    name: Units
    description: Data about spiking units. Event times of observed units (e.g. cell,
      synapse, etc.) should be concatenated and stored in spike_times.
    is_a: DynamicTable
    attributes:
      name:
        name: name
        ifabsent: string(Units)
        identifier: true
        range: string
        required: true
      electrode_group:
        name: electrode_group
        description: Electrode group that each spike unit came from.
        array:
          minimum_number_dimensions: 1
          maximum_number_dimensions: false
        range: ElectrodeGroup
        required: false
        multivalued: false
        inlined: true
      electrodes:
        name: electrodes
        annotations:
          named:
            tag: named
            value: true
          source_type:
            tag: source_type
            value: neurodata_type_inc
        description: Electrode that each spike unit came from, specified using a DynamicTableRegion.
        range: DynamicTableRegion
        inlined: true
      electrodes_index:
        name: electrodes_index
        annotations:
          named:
            tag: named
            value: true
          source_type:
            tag: source_type
            value: neurodata_type_inc
        description: Index into electrodes.
        range: VectorIndex
        inlined: true
      obs_intervals:
        name: obs_intervals
        description: Observation intervals for each unit.
        array:
          dimensions:
          - alias: num_intervals
          - alias: start_end
            exact_cardinality: 2
        range: float64
        required: false
        multivalued: false
      obs_intervals_index:
        name: obs_intervals_index
        annotations:
          named:
            tag: named
            value: true
          source_type:
            tag: source_type
            value: neurodata_type_inc
        description: Index into the obs_intervals dataset.
        range: VectorIndex
        inlined: true
      spike_times:
        name: spike_times
        description: Spike times for each unit in seconds.
        range: Units__spike_times
        inlined: true
      spike_times_index:
        name: spike_times_index
        annotations:
          named:
            tag: named
            value: true
          source_type:
            tag: source_type
            value: neurodata_type_inc
        description: Index into the spike_times dataset.
        range: VectorIndex
        inlined: true
      waveform_mean:
        name: waveform_mean
        description: Spike waveform mean for each spike unit.
        range: Units__waveform_mean
        inlined: true
      waveform_sd:
        name: waveform_sd
        description: Spike waveform standard deviation for each spike unit.
        range: Units__waveform_sd
        inlined: true
      waveforms:
        name: waveforms
        description: Individual waveforms for each spike on each electrode. This is
          a doubly indexed column. The 'waveforms_index' column indexes which waveforms
          in this column belong to the same spike event for a given unit, where each
          waveform was recorded from a different electrode. The 'waveforms_index_index'
          column indexes the 'waveforms_index' column to indicate which spike events
          belong to a given unit. For example, if the 'waveforms_index_index' column
          has values [2, 5, 6], then the first 2 elements of the 'waveforms_index'
          column correspond to the 2 spike events of the first unit, the next 3 elements
          of the 'waveforms_index' column correspond to the 3 spike events of the
          second unit, and the next 1 element of the 'waveforms_index' column corresponds
          to the 1 spike event of the third unit. If the 'waveforms_index' column
          has values [3, 6, 8, 10, 12, 13], then the first 3 elements of the 'waveforms'
          column contain the 3 spike waveforms that were recorded from 3 different
          electrodes for the first spike time of the first unit. See https://nwb-schema.readthedocs.io/en/stable/format_description.html#doubly-ragged-arrays
          for a graphical representation of this example. When there is only one electrode
          for each unit (i.e., each spike time is associated with a single waveform),
          then the 'waveforms_index' column will have values 1, 2, ..., N, where N
          is the number of spike events. The number of electrodes for each spike event
          should be the same within a given unit. The 'electrodes' column should be
          used to indicate which electrodes are associated with each unit, and the
          order of the waveforms within a given unit x spike event should be in the
          same order as the electrodes referenced in the 'electrodes' column of this
          table. The number of samples for each waveform must be the same.
        range: Units__waveforms
        inlined: true
      waveforms_index:
        name: waveforms_index
        annotations:
          named:
            tag: named
            value: true
          source_type:
            tag: source_type
            value: neurodata_type_inc
        description: Index into the waveforms dataset. One value for every spike event.
          See 'waveforms' for more detail.
        range: VectorIndex
        inlined: true
      waveforms_index_index:
        name: waveforms_index_index
        annotations:
          named:
            tag: named
            value: true
          source_type:
            tag: source_type
            value: neurodata_type_inc
        description: Index into the waveforms_index dataset. One value for every unit
          (row in the table). See 'waveforms' for more detail.
        range: VectorIndex
        inlined: true
    tree_root: true
  Units__spike_times:
    name: Units__spike_times
    description: Spike times for each unit in seconds.
    is_a: VectorData
    attributes:
      name:
        name: name
        ifabsent: string(spike_times)
        identifier: true
        range: string
        required: true
        equals_string: spike_times
      resolution:
        name: resolution
        description: The smallest possible difference between two spike times. Usually
          1 divided by the acquisition sampling rate from which spike times were extracted,
          but could be larger if the acquisition time series was downsampled or smaller
          if the acquisition time series was smoothed/interpolated and it is possible
          for the spike time to be between samples.
        range: float64
        required: false
  Units__waveform_mean:
    name: Units__waveform_mean
    description: Spike waveform mean for each spike unit.
    is_a: VectorData
    attributes:
      name:
        name: name
        ifabsent: string(waveform_mean)
        identifier: true
        range: string
        required: true
        equals_string: waveform_mean
      sampling_rate:
        name: sampling_rate
        description: Sampling rate, in hertz.
        range: float32
        required: false
      unit:
        name: unit
        description: Unit of measurement. This value is fixed to 'volts'.
        ifabsent: string(volts)
        range: text
        required: false
        equals_string: volts
  Units__waveform_sd:
    name: Units__waveform_sd
    description: Spike waveform standard deviation for each spike unit.
    is_a: VectorData
    attributes:
      name:
        name: name
        ifabsent: string(waveform_sd)
        identifier: true
        range: string
        required: true
        equals_string: waveform_sd
      sampling_rate:
        name: sampling_rate
        description: Sampling rate, in hertz.
        range: float32
        required: false
      unit:
        name: unit
        description: Unit of measurement. This value is fixed to 'volts'.
        ifabsent: string(volts)
        range: text
        required: false
        equals_string: volts
  Units__waveforms:
    name: Units__waveforms
    description: Individual waveforms for each spike on each electrode. This is a
      doubly indexed column. The 'waveforms_index' column indexes which waveforms
      in this column belong to the same spike event for a given unit, where each waveform
      was recorded from a different electrode. The 'waveforms_index_index' column
      indexes the 'waveforms_index' column to indicate which spike events belong to
      a given unit. For example, if the 'waveforms_index_index' column has values
      [2, 5, 6], then the first 2 elements of the 'waveforms_index' column correspond
      to the 2 spike events of the first unit, the next 3 elements of the 'waveforms_index'
      column correspond to the 3 spike events of the second unit, and the next 1 element
      of the 'waveforms_index' column corresponds to the 1 spike event of the third
      unit. If the 'waveforms_index' column has values [3, 6, 8, 10, 12, 13], then
      the first 3 elements of the 'waveforms' column contain the 3 spike waveforms
      that were recorded from 3 different electrodes for the first spike time of the
      first unit. See https://nwb-schema.readthedocs.io/en/stable/format_description.html#doubly-ragged-arrays
      for a graphical representation of this example. When there is only one electrode
      for each unit (i.e., each spike time is associated with a single waveform),
      then the 'waveforms_index' column will have values 1, 2, ..., N, where N is
      the number of spike events. The number of electrodes for each spike event should
      be the same within a given unit. The 'electrodes' column should be used to indicate
      which electrodes are associated with each unit, and the order of the waveforms
      within a given unit x spike event should be in the same order as the electrodes
      referenced in the 'electrodes' column of this table. The number of samples for
      each waveform must be the same.
    is_a: VectorData
    attributes:
      name:
        name: name
        ifabsent: string(waveforms)
        identifier: true
        range: string
        required: true
        equals_string: waveforms
      sampling_rate:
        name: sampling_rate
        description: Sampling rate, in hertz.
        range: float32
        required: false
      unit:
        name: unit
        description: Unit of measurement. This value is fixed to 'volts'.
        ifabsent: string(volts)
        range: text
        required: false
        equals_string: volts
