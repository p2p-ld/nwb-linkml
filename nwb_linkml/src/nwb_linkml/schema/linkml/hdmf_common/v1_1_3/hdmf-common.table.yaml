name: hdmf-common.table
annotations:
  is_namespace:
    tag: is_namespace
    value: false
  namespace:
    tag: namespace
    value: hdmf-common
id: hdmf-common.table
version: 1.1.3
imports:
- hdmf-common.nwb.language
default_prefix: hdmf-common.table/
classes:
  Data:
    name: Data
    description: An abstract data type for a dataset.
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
    tree_root: true
  Index:
    name: Index
    description: Pointers that index data values.
    is_a: Data
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      target:
        name: target
        description: Target dataset that this index applies to.
        range: Data
    tree_root: true
  VectorData:
    name: VectorData
    description: An n-dimensional dataset representing a column of a DynamicTable.
      If used without an accompanying VectorIndex, first dimension is along the rows
      of the DynamicTable and each step along the first dimension is a cell of the
      larger table. VectorData can also be used to represent a ragged array if paired
      with a VectorIndex. This allows for storing arrays of varying length in a single
      cell of the DynamicTable by indexing into this VectorData. The first vector
      is at VectorData[0:VectorIndex(0)+1]. The second vector is at VectorData[VectorIndex(0)+1:VectorIndex(1)+1],
      and so on.
    is_a: Data
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      description:
        name: description
        description: Description of what these vectors represent.
        range: text
      array:
        name: array
        range: AnyType
        any_of:
        - array:
            dimensions:
            - alias: dim0
        - array:
            dimensions:
            - alias: dim0
            - alias: dim1
        - array:
            dimensions:
            - alias: dim0
            - alias: dim1
            - alias: dim2
        - array:
            dimensions:
            - alias: dim0
            - alias: dim1
            - alias: dim2
            - alias: dim3
    tree_root: true
  VectorIndex:
    name: VectorIndex
    description: Used with VectorData to encode a ragged array. An array of indices
      into the first dimension of the target VectorData, and forming a map between
      the rows of a DynamicTable and the indices of the VectorData.
    is_a: Index
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      target:
        name: target
        description: Reference to the target dataset that this index applies to.
        range: VectorData
      array:
        name: array
        array:
          dimensions:
          - alias: num_rows
        range: AnyType
    tree_root: true
  ElementIdentifiers:
    name: ElementIdentifiers
    description: A list of unique identifiers for values within a dataset, e.g. rows
      of a DynamicTable.
    is_a: Data
    attributes:
      name:
        name: name
        ifabsent: string(element_id)
        identifier: true
        range: string
        required: true
    tree_root: true
  DynamicTableRegion:
    name: DynamicTableRegion
    description: DynamicTableRegion provides a link from one table to an index or
      region of another. The `table` attribute is a link to another `DynamicTable`,
      indicating which table is referenced, and the data is int(s) indicating the
      row(s) (0-indexed) of the target array. `DynamicTableRegion`s can be used to
      associate rows with repeated meta-data without data duplication. They can also
      be used to create hierarchical relationships between multiple `DynamicTable`s.
      `DynamicTableRegion` objects may be paired with a `VectorIndex` object to create
      ragged references, so a single cell of a `DynamicTable` can reference many rows
      of another `DynamicTable`.
    is_a: VectorData
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      table:
        name: table
        description: Reference to the DynamicTable object that this region applies
          to.
        range: DynamicTable
      description:
        name: description
        description: Description of what this table region points to.
        range: text
    tree_root: true
  Container:
    name: Container
    description: An abstract data type for a generic container storing collections
      of data and metadata. Base type for all data and metadata containers.
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
    tree_root: true
  DynamicTable:
    name: DynamicTable
    description: A group containing multiple datasets that are aligned on the first
      dimension (Currently, this requirement if left up to APIs to check and enforce).
      Apart from a column that contains unique identifiers for each row there are
      no other required datasets. Users are free to add any number of VectorData objects
      here. Table functionality is already supported through compound types, which
      is analogous to storing an array-of-structs. DynamicTable can be thought of
      as a struct-of-arrays. This provides an alternative structure to choose from
      when optimizing storage for anticipated access patterns. Additionally, this
      type provides a way of creating a table without having to define a compound
      type up front. Although this convenience may be attractive, users should think
      carefully about how data will be accessed. DynamicTable is more appropriate
      for column-centric access, whereas a dataset with a compound type would be more
      appropriate for row-centric access. Finally, data size should also be taken
      into account. For small tables, performance loss may be an acceptable trade-off
      for the flexibility of a DynamicTable. For example, DynamicTable was originally
      developed for storing trial data and spike unit metadata. Both of these use
      cases are expected to produce relatively small tables, so the spatial locality
      of multiple datasets present in a DynamicTable is not expected to have a significant
      performance impact. Additionally, requirements of trial and unit metadata tables
      are sufficiently diverse that performance implications can be overlooked in
      favor of usability.
    is_a: Container
    attributes:
      name:
        name: name
        identifier: true
        range: string
        required: true
      colnames:
        name: colnames
        description: The names of the columns in this table. This should be used to
          specify an order to the columns.
        range: text
      description:
        name: description
        description: Description of what is in this dynamic table.
        range: text
      id:
        name: id
        description: Array of unique identifiers for the rows of this dynamic table.
        multivalued: false
        array:
          dimensions:
          - alias: num_rows
        range: int
        required: true
      vector_data:
        name: vector_data
        description: Vector columns of this dynamic table.
        multivalued: true
        range: VectorData
        required: false
      vector_index:
        name: vector_index
        description: Indices for the vector columns of this dynamic table.
        multivalued: true
        range: VectorIndex
        required: false
    tree_root: true
